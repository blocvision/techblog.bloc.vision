{"data":{"markdownRemark":{"id":"a85b272d-cd16-5955-bb6a-477441cb7ae3","html":"<h2>도커 설치하기</h2>\n<ul>\n<li>Win/Mac: <a href=\"https://www.docker.com/get-started\">Get Started with Docker | Docker</a></li>\n<li>Ubuntu: <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">Get Docker CE for Ubuntu | Docker Documentation</a></li>\n</ul>\n<h3>버전체크</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker --version\nDocker version 18.09.1, build 4c52b90</code></pre></div>\n<h3>도커정보</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker info\nContainers: 3\n Running: 1\n Paused: 0\n Stopped: 2\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<h2>테스트도커</h2>\n<h3>hello-world</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run hello-world\nUnable to <span class=\"token function\">find</span> image <span class=\"token string\">'hello-world:latest'</span> locally\nlatest: Pulling from library/hello-world\n<span class=\"token punctuation\">..</span>.\nHello from Docker<span class=\"token operator\">!</span>\nThis message shows that your installation appears to be working correctly.\n<span class=\"token punctuation\">..</span>.\n\n$ docker image <span class=\"token function\">ls</span>\nREPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE\nhello-world                                 latest              fce289e99eb9        2 weeks ago         1.84kB\n\n$ docker <span class=\"token function\">ps</span>\n$ docker container <span class=\"token function\">ls</span>\n\n$ docker <span class=\"token function\">ps</span> -a\n$ docker container <span class=\"token function\">ls</span> --all\nCONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS                     PORTS                                                                  NAMES\na304971ea41d        hello-world              <span class=\"token string\">\"/hello\"</span>                 3 minutes ago       Exited <span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> 3 minutes ago\n\n$ docker <span class=\"token function\">rm</span> a304971ea41d\na304971ea41d\n\n$ docker rmi fce289e99eb9\nUntagged: hello-world:latest\nUntagged: hello-world@sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535\nDeleted: sha256:fce289e99eb9bca977dae136fbe2a82b6b7d4c372474c9235adc1741675f587e\nDeleted: sha256:af0b15c8625bb1938f1d7b17081031f649fd14e6b233688eea3c5483994a66a3\n\n$ docker images</code></pre></div>\n<h2>컨테이너</h2>\n<h3>도커허브에 있는 nginx 이미지 이용하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --name nginx-test -p 8888:80 -d nginx\n532c7de578f9de5e3b44a1a6554f80a7f5693aa3712bf3f21429acab8323db3c\n\n$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                                  NAMES\ne21c85565dd6        nginx               <span class=\"token string\">\"nginx -g 'daemon of…\"</span>   14 seconds ago      Up 13 seconds       0.0.0.0:8888-<span class=\"token operator\">></span>80/tcp                                                   nginx\n\n<span class=\"token comment\">#############################</span>\n<span class=\"token comment\"># open http://localhsot:8888</span>\n<span class=\"token comment\">#############################</span>\n\n$ docker stop nginx-test\nnginx-test\n\n$ docker <span class=\"token function\">rm</span> nginx-test\nnginx-test</code></pre></div>\n<h3>nginx 직접만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker pull ubuntu\nUsing default tag: latest\nlatest: Pulling from library/ubuntu\n<span class=\"token punctuation\">..</span>.\n\n$ docker images\nREPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE\nubuntu                                      latest              1d9c17228a9e        3 weeks ago         86.7MB\n\n$ docker run --name nginx-test -p 8888:80 -it ubuntu /bin/bash\n\n<span class=\"token comment\">## In Container</span>\n\n<span class=\"token comment\"># apt update</span>\nGet:1 http://security.ubuntu.com/ubuntu bionic-security InRelease <span class=\"token punctuation\">[</span>83.2 kB<span class=\"token punctuation\">]</span>\nGet:2 http://archive.ubuntu.com/ubuntu bionic InRelease <span class=\"token punctuation\">[</span>242 kB<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># apt install -y nginx</span>\nReading package lists<span class=\"token punctuation\">..</span>. Done\nBuilding dependency tree\nReading state information<span class=\"token punctuation\">..</span>. Done\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token comment\"># service nginx start</span>\n * Starting nginx nginx\n\n\n<span class=\"token comment\">#############################</span>\n<span class=\"token comment\"># open http://localhsot:8888</span>\n<span class=\"token comment\">#############################</span></code></pre></div>\n<h2>도커이미지 빌드하기</h2>\n<h3>작업공간 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> docker-study</code></pre></div>\n<p>index.html</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello, Harry!!</code></pre></div>\n<h3>Dockerfile</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">FROM ubuntu:latest\n\nRUN \\\n  apt update &amp;&amp; \\\n  apt install -y nginx\n\nCOPY ./index.html /var/www/html\n\nEXPOSE 80\n\nCMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></pre></div>\n<p>daemon off 로 실행해 도커프로세스가 죽지 않음. 백그라운드로 실행되면 도커프로세스가 끝남.</p>\n<h3>이미지생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build -t docker-test <span class=\"token keyword\">.</span>\n$ docker images\nREPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE\ndocker-test                                 latest              1dac1bec3353        36 seconds ago      171MB</code></pre></div>\n<h3>컨테이너 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --name <span class=\"token function\">test</span> -p 8888:80 -d docker-test\n5d097cb5a6746a7c15963469f39d6ff278cb51dbc08fd689d28a26bd9e0ec19a\n\n<span class=\"token comment\">#############################</span>\n<span class=\"token comment\"># open http://localhsot:8888</span>\n<span class=\"token comment\">#############################</span></code></pre></div>\n<h3>컨테이너 중지 및 삭제</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker stop <span class=\"token function\">test</span>\n<span class=\"token function\">test</span>\n$ docker <span class=\"token function\">rm</span> <span class=\"token function\">test</span>\n<span class=\"token function\">test</span></code></pre></div>\n<p>Container 삭제시 안의 내용도 모두 함께 삭제</p>\n<h3>파일공유</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> html\n$ <span class=\"token function\">pwd</span>\n/Users/harry/Work/docker-study\n$ <span class=\"token function\">cat</span> <span class=\"token operator\">></span> html/index.html\nI love Harry<span class=\"token operator\">!</span>\n\n$ docker run --name <span class=\"token function\">test</span> -p 8888:80 -v <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">pwd</span><span class=\"token variable\">)</span></span>/html:/var/www/html -d docker-test\ne6a082367faf679ef5cce512869281e3b2c6d2c70844c564659fe73cedb16dbb\n\n<span class=\"token comment\">#############################</span>\n<span class=\"token comment\"># open http://localhsot:8888</span>\n<span class=\"token comment\">#############################</span>\n\n$ <span class=\"token function\">cat</span> <span class=\"token operator\">></span> html/index.html\nI love Harry, too<span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n\n<span class=\"token comment\">#############################</span>\n<span class=\"token comment\"># open http://localhsot:8888</span>\n<span class=\"token comment\">#############################</span>\n\n$ docker stop <span class=\"token function\">test</span>\n<span class=\"token function\">test</span>\n$ docker <span class=\"token function\">rm</span> <span class=\"token function\">test</span>\n<span class=\"token function\">test</span></code></pre></div>\n<h3>도커볼륨</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker volume create test-vol\ntest-vol\n\n$ docker run --name <span class=\"token function\">test</span> -p 8888:80 -v test-vol:/var/www/html -d docker-test\n88f0e746280515faba4810a91dc16c702e6663a3fa7119f3cdbe6a28f8a8a321\n\n$ docker <span class=\"token function\">exec</span> -it <span class=\"token function\">test</span> /bin/bash\n\n<span class=\"token comment\"># cat > /var/www/html/index.html</span>\nI love Harry<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n\n<span class=\"token comment\">#############################</span>\n<span class=\"token comment\"># open http://localhsot:8888</span>\n<span class=\"token comment\">#############################</span>\n\n<span class=\"token comment\"># exit</span>\n\n$ docker stop <span class=\"token function\">test</span>\n<span class=\"token function\">test</span>\n$ docker <span class=\"token function\">rm</span> <span class=\"token function\">test</span>\n<span class=\"token function\">test</span>\n\n<span class=\"token comment\">### no use volume</span>\n$ docker run --name <span class=\"token function\">test</span> -p 8888:80 -d docker-test\n\n<span class=\"token comment\">#############################</span>\n<span class=\"token comment\"># open http://localhsot:8888</span>\n<span class=\"token comment\">#############################</span>\n\n$ docker stop <span class=\"token function\">test</span>\n<span class=\"token function\">test</span>\n$ docker <span class=\"token function\">rm</span> <span class=\"token function\">test</span>\n<span class=\"token function\">test</span>\n\n<span class=\"token comment\">### use volume</span>\n$ docker run --name <span class=\"token function\">test</span> -p 8888:80 -v test-vol:/var/www/html -d docker-test\n\n<span class=\"token comment\">#############################</span>\n<span class=\"token comment\"># open http://localhsot:8888</span>\n<span class=\"token comment\">#############################</span>\n\n$ docker stop <span class=\"token function\">test</span>\n<span class=\"token function\">test</span>\n$ docker <span class=\"token function\">rm</span> <span class=\"token function\">test</span>\n<span class=\"token function\">test</span></code></pre></div>\n<h3>클린업</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">ps</span>\n$ docker <span class=\"token function\">ps</span> -a\n$ docker images\n$ docker rmi docker-test\n$ docker volume list\n$ docker volume <span class=\"token function\">rm</span> test-vol</code></pre></div>\n<h2>Flask App</h2>\n<p><a href=\"https://docs.docker.com/get-started/part2/\">Get Started, Part 2: Containers | Docker Documentation</a></p>\n<h3>작업공간</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> flask<span class=\"token punctuation\">;</span><span class=\"token function\">cd</span> <span class=\"token variable\">$_</span>\n$ <span class=\"token function\">pwd</span>\n/Users/harry/Work/docker-study/flask</code></pre></div>\n<p>requirements.txt</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Flask\nRedis</code></pre></div>\n<p>app.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> redis <span class=\"token keyword\">import</span> Redis<span class=\"token punctuation\">,</span> RedisError\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> socket\n\n<span class=\"token comment\"># Connect to Redis</span>\nredis <span class=\"token operator\">=</span> Redis<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">\"redis\"</span><span class=\"token punctuation\">,</span> db<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> socket_connect_timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> socket_timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        visits <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">(</span><span class=\"token string\">\"counter\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> RedisError<span class=\"token punctuation\">:</span>\n        visits <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;i>cannot connect to Redis, counter disabled&lt;/i>\"</span>\n\n    html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;h3>Hello {name}!&lt;/h3>\"</span> \\\n           <span class=\"token string\">\"&lt;b>Hostname:&lt;/b> {hostname}&lt;br/>\"</span> \\\n           <span class=\"token string\">\"&lt;b>Visits:&lt;/b> {visits}\"</span>\n    <span class=\"token keyword\">return</span> html<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hostname<span class=\"token operator\">=</span>socket<span class=\"token punctuation\">.</span>gethostname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> visits<span class=\"token operator\">=</span>visits<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Dockerfile</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"># Use an official Python runtime as a parent image\nFROM python:2.7-slim\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\n# Make port 80 available to the world outside this container\nEXPOSE 80\n\n# Define environment variable\nENV NAME World\n\n# Run app.py when the container launches\nCMD [&quot;python&quot;, &quot;app.py&quot;]</code></pre></div>\n<p>Files</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span>\nDockerfile        app.py            requirements.txt</code></pre></div>\n<h3>Docker build</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build —-tag<span class=\"token operator\">=</span>friendlyhello <span class=\"token keyword\">.</span>\n$ docker run -d -p 4000:80 friendlyhello</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nfriendlyhello latest 91eb5f739d4c 6 days ago 131MB\npython 2.7-slim f090c78858fa 4 weeks ago 120MB\n\n파이썬 이미지에 스택하게 friendlyhello  가 올라가기 때문에 image 가 2개 생긴다.</code></pre></div>\n<h3>도커컴포즈</h3>\n<p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration.</p>\n<p>docker-compose.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"4000:80\"</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"redis:alpine\"</span></code></pre></div>\n<p>yml 도 앞 공백문자 중요\n도커컴포즈를 통해, 이미지도 빌드해 주고, 컨테이너로 실행까지 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose up -d\n<span class=\"token punctuation\">..</span>.\nCreating flask_redis_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating flask_web_1   <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n\n$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n1f33e7c563c3        flask_web           <span class=\"token string\">\"python app.py\"</span>          30 seconds ago      Up 29 seconds       0.0.0.0:4000-<span class=\"token operator\">></span>80/tcp   flask_web_1\n581306d43d0f        redis:alpine        <span class=\"token string\">\"docker-entrypoint.s…\"</span>   30 seconds ago      Up 29 seconds       6379/tcp               flask_redis_1\n\n$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nflask_web           latest              9aafb7983673        About a minute ago   131MB\npython              2.7-slim            4620f1f365b9        2 days ago           120MB\nredis               alpine              b42dc832c855        5 weeks ago          40.9MB\n\n$ docker-compose <span class=\"token function\">ps</span>\n    Name                   Command               State          Ports\n-----------------------------------------------------------------------------\nflask_redis_1   docker-entrypoint.sh redis <span class=\"token punctuation\">..</span>.   Up      6379/tcp\nflask_web_1     python app.py                    Up      0.0.0.0:4000-<span class=\"token operator\">></span>80/tcp\n\n<span class=\"token comment\">###</span>\n<span class=\"token comment\"># Open http://localhost:4000</span>\n<span class=\"token comment\">###</span></code></pre></div>\n<p>새로고침을 하면 Visits의 Counter가 증가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose stop\nStopping flask_web_1   <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping flask_redis_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n\n$ docker-compose <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n\n$ docker-compose <span class=\"token function\">ps</span> -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES\nff6f67658acf        flask_web           <span class=\"token string\">\"python app.py\"</span>          34 seconds ago      Exited <span class=\"token punctuation\">(</span>137<span class=\"token punctuation\">)</span> 17 seconds ago                       flask_web_1\n0b3119711cf0        redis:alpine        <span class=\"token string\">\"docker-entrypoint.s…\"</span>   34 seconds ago      Exited <span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> 27 seconds ago                         flask_redis_1\n\n<span class=\"token comment\">###</span>\n<span class=\"token comment\"># Open http://localhost:4000</span>\n<span class=\"token comment\">###</span>\n\n$ docker-compose start\nStarting web   <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting redis <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n\n$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                  PORTS                  NAMES\nff6f67658acf        flask_web           <span class=\"token string\">\"python app.py\"</span>          56 seconds ago      Up Less than a second   0.0.0.0:4000-<span class=\"token operator\">></span>80/tcp   flask_web_1\n0b3119711cf0        redis:alpine        <span class=\"token string\">\"docker-entrypoint.s…\"</span>   56 seconds ago      Up Less than a second   6379/tcp               flask_redis_1\n\n<span class=\"token comment\">###</span>\n<span class=\"token comment\"># Open http://localhost:4000</span>\n<span class=\"token comment\">###</span></code></pre></div>\n<p>이전의 Counter에 이어서 계속 증가</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose down\nStopping flask_web_1   <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping flask_redis_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving flask_web_1   <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving flask_redis_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving network flask_default\n\n$ docker-compose start\nStarting web   <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting redis <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nERROR: No containers to start\n\n<span class=\"token comment\"># docker-compose up -d</span>\nCreating flask_redis_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating flask_web_1   <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\">###</span>\n<span class=\"token comment\"># Open http://localhost:4000</span>\n<span class=\"token comment\">###</span></code></pre></div>\n<p>Visits Counter가 새롭게 시작함을 볼 수가 있다.</p>\n<h3>클린업</h3>\n<p>도커 컨테이너까지 삭제함.\n데이터를 살리려면,.... 볼륨매칭해서 사용하면 됨.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose down\n$ docker <span class=\"token function\">ps</span> -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre></div>\n<p>수고하셨습니다.~</p>","frontmatter":{"date":"February 01, 2019","title":"도커 기본개념 잡기 퀵스타트","description":"도커의 기본적인 개념을 잡기 위한 퀵스타트 입니다.","tags":["도커"]}}},"pageContext":{"id":"a85b272d-cd16-5955-bb6a-477441cb7ae3"}}